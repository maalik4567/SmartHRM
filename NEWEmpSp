create database HRSystem;
use HRSystem

---------------NEW TBS-----------
-- Create Department Table
CREATE TABLE Department (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL
);

-- Create Position Table
CREATE TABLE Position (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Title NVARCHAR(100) NOT NULL
);

-- Create EmployeeType Table
CREATE TABLE EmployeeType (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Type NVARCHAR(100) NOT NULL
);


-- Insert Sample Data into Department Table
INSERT INTO Department (Name) VALUES ('Human Resources');
INSERT INTO Department (Name) VALUES ('Information Technology');
INSERT INTO Department (Name) VALUES ('Finance');
INSERT INTO Department (Name) VALUES ('Marketing');

-- Insert Sample Data into Position Table
INSERT INTO Position (Title) VALUES ('Manager');
INSERT INTO Position (Title) VALUES ('Team Lead');
INSERT INTO Position (Title) VALUES ('Senior Developer');
INSERT INTO Position (Title) VALUES ('Junior Developer');

-- Insert Sample Data into EmployeeType Table
INSERT INTO EmployeeType (Type) VALUES ('Full-Time');
INSERT INTO EmployeeType (Type) VALUES ('Part-Time');
INSERT INTO EmployeeType (Type) VALUES ('Contract');
INSERT INTO EmployeeType (Type) VALUES ('Intern');


CREATE TABLE SignIn (
    Id INT PRIMARY KEY IDENTITY(1,1),  -- Auto-incrementing ID column
    UserName NVARCHAR(100) NOT NULL,       -- Name column with a max length of 100 characters
    Password NVARCHAR(100) NOT NULL    -- Password column with a max length of 100 characters
);

insert into signin values('malik45','m123');
select * from signin;

-- Employees Table to use foreign keys
CREATE TABLE Employees (
    EmpId INT IDENTITY(1,1) PRIMARY KEY,
    FullName NVARCHAR(100),
    Email NVARCHAR(100),
    DepartmentId INT,  -- Foreign key for Department
    PositionId INT,    -- Foreign key for Position
    EmployeeTypeId INT, -- Foreign key for EmployeeType
    HireDate DATE,
    DateOfBirth DATE,
    Gender NVARCHAR(10),
    Salary DECIMAL(18,2),
    CNIC VARCHAR(14),     -- CNIC must be 13-14 digits
    PhoneNumber VARCHAR(11), -- PhoneNumber must be exactly 11 digits
    CONSTRAINT FK_Employees_Department FOREIGN KEY (DepartmentId) REFERENCES Department(Id),
    CONSTRAINT FK_Employees_Position FOREIGN KEY (PositionId) REFERENCES Position(Id),
    CONSTRAINT FK_Employees_EmployeeType FOREIGN KEY (EmployeeTypeId) REFERENCES EmployeeType(Id)
);


-- Insert Sample Data into Employees Table
INSERT INTO Employees (FullName, Email, DepartmentId, PositionId, HireDate, DateOfBirth, EmployeeTypeId, Gender, Salary, CNIC, PhoneNumber)
VALUES 
('John Doe', 'john.doe@example.com', 1, 1, '2020-01-15', '1990-05-20', 1, 'Male', 85000.00, '1234567890123', '03001234567'),
('Jane Smith', 'jane.smith@example.com', 2, 3, '2021-03-22', '1985-07-18', 1, 'Female', 95000.00, '1234567890124', '03001234568'),
('Robert Brown', 'robert.brown@example.com', 3, 2, '2019-10-10', '1992-11-25', 2, 'Male', 75000.00, '1234567890125', '03001234569'),
('Emily Davis', 'emily.davis@example.com', 4, 4, '2018-08-30', '1994-03-12', 1, 'Female', 60000.00, '1234567890126', '03001234570'),
('Michael Johnson', 'michael.johnson@example.com', 2, 1, '2022-07-01', '1987-09-08', 3, 'Male', 55000.00, '1234567890127', '03001234571'),
('Sophia Wilson', 'sophia.wilson@example.com', 1, 3, '2021-02-20', '1990-01-15', 2, 'Female', 78000.00, '1234567890128', '03001234572'),
('David Lee', 'david.lee@example.com', 3, 4, '2017-11-05', '1989-04-19', 4, 'Male', 50000.00, '1234567890129', '03001234573'),
('Olivia Clark', 'olivia.clark@example.com', 4, 2, '2020-06-12', '1995-12-22', 1, 'Female', 67000.00, '1234567890120', '03001234574'),
('Liam Martinez', 'liam.martinez@example.com', 2, 1, '2022-09-25', '1988-05-30', 1, 'Male', 90000.00, '1234567890121', '03001234575'),
('Ava Harris', 'ava.harris@example.com', 1, 4, '2019-04-18', '1993-11-11', 3, 'Female', 65000.00, '1234567890122', '03001234576');


---------Employee SPS--------------
CREATE PROCEDURE InsertEmployee
    @FullName NVARCHAR(100),
    @Email NVARCHAR(100),
    @Department NVARCHAR(100),
    @Position NVARCHAR(100),
    @HireDate DATE,
    @DateOfBirth DATE,
    @EmployeeType NVARCHAR(50),
    @Gender NVARCHAR(10),
    @Salary DECIMAL(18,2),
    @CNIC VARCHAR(14),
    @PhoneNumber VARCHAR(11)
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO Employees (FullName, Email, Department, Position, HireDate, DateOfBirth, EmployeeType, Gender, Salary, CNIC, PhoneNumber)
    VALUES (@FullName, @Email, @Department, @Position, @HireDate, @DateOfBirth, @EmployeeType, @Gender, @Salary, @CNIC, @PhoneNumber);

    -- Return the newly inserted EmpId
    SELECT SCOPE_IDENTITY() AS EmpId;
END;

CREATE PROCEDURE UpdateEmployee
    @EmpId INT,
    @FullName NVARCHAR(100),
    @Email NVARCHAR(100),
    @Department INT,
    @Position INT,
    @HireDate DATE,
    @DateOfBirth DATE,
    @EmployeeType INT,
    @Gender NVARCHAR(10),
    @Salary DECIMAL(18, 2),
    @CNIC NVARCHAR(20),
    @PhoneNumber NVARCHAR(20)
AS
BEGIN
    UPDATE Employees
    SET 
        FullName = @FullName,
        Email = @Email,
        Department = @Department,
        Position = @Position,
        HireDate = @HireDate,
        DateOfBirth = @DateOfBirth,
        EmployeeType = @EmployeeType,
        Gender = @Gender,
        Salary = @Salary,
        CNIC = @CNIC,
        PhoneNumber = @PhoneNumber
    WHERE EmpId = @EmpId;
END;



ALTER PROCEDURE GetAllEmployees    
AS    
BEGIN    
    SELECT 
        e.EmpId,
        e.FullName,
        e.Email,
        e.HireDate,
        e.DateOfBirth,
        e.Gender,
        e.Salary,
        e.CNIC,
        e.PhoneNumber,
        p.Title AS Position,        -- Fetch the position title
        d.Name AS Department,       -- Fetch the department name
        et.Type AS EmployeeType     -- Fetch the employee type
    FROM Employees e
    INNER JOIN Position p ON p.Id = e.PositionId      -- Correct FK reference
    INNER JOIN Department d ON d.Id = e.DepartmentId  -- Correct FK reference
    INNER JOIN EmployeeType et ON et.Id = e.EmployeeTypeId;  -- Correct FK reference
END;

-- Retrieve the employee details by EmpId
ALTER PROCEDURE GetEmployeeById
    @EmpId INT
AS
BEGIN
    -- Retrieve the employee details by EmpId
    SELECT 
        e.EmpId,
        e.FullName,
        e.Email,
        e.HireDate,
        e.DateOfBirth,
        e.Gender,
        e.Salary,
        e.CNIC,
        e.PhoneNumber,
        p.Title,            -- Position title from Position table
        d.Name AS Name,  -- Department name from Department table
        et.Type AS EmployeeType   -- Employee type from EmployeeType table
    FROM Employees e
    INNER JOIN Position p ON p.Id = e.PositionId       -- Use PositionId for the foreign key join
    INNER JOIN Department d ON d.Id = e.DepartmentId   -- Use DepartmentId for the foreign key join
    INNER JOIN EmployeeType et ON et.Id = e.EmployeeTypeId -- Use EmployeeTypeId for the foreign key join
    WHERE e.EmpId = @EmpId;    -- Filter by the provided EmpId
END;


EXEC GetEmployeeById @EmpId = 2; -- Replace 1 with a valid employee ID
EXEC GetAllEmployees


CREATE PROCEDURE DeleteEmployeeById
    @EmployeeId INT
AS
BEGIN
    -- Delete the employee record with the specified ID
    DELETE FROM Employees
    WHERE EmpId = @EmployeeId;
END;

SELECT *
FROM Employees
WHERE EmpId = 2;


-- 
select * from Employees
